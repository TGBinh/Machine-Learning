"""
L·ªánh Django ƒë·ªÉ import d·ªØ li·ªáu m·∫´u t·ª´ file Excel v√†o c∆° s·ªü d·ªØ li·ªáu
"""
from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from transactions.models import Transaction
from transactions.utils.data_processor import BoXuLyDuLieu
import pandas as pd
import os
from datetime import datetime
import random

class Command(BaseCommand):
    help = 'Import d·ªØ li·ªáu giao d·ªãch m·∫´u t·ª´ file Excel v√†o c∆° s·ªü d·ªØ li·ªáu SQLite'

    def add_arguments(self, parser):
        parser.add_argument(
            '--file',
            type=str,
            help='ƒê∆∞·ªùng d·∫´n ƒë·∫øn file Excel ch·ª©a d·ªØ li·ªáu',
            default='data.xlsx'
        )
        parser.add_argument(
            '--clear',
            action='store_true',
            help='X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi import',
        )
        parser.add_argument(
            '--sample',
            action='store_true',
            help='T·∫°o d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ file Excel',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('=== B·∫ÆT ƒê·∫¶U IMPORT D·ªÆ LI·ªÜU ==='))
        
        file_path = options['file']
        
        # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(file_path):
            if options['sample']:
                self.stdout.write(self.style.WARNING(f'Kh√¥ng t√¨m th·∫•y file {file_path}. T·∫°o d·ªØ li·ªáu m·∫´u...'))
                # X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi t·∫°o sample data
                if Transaction.objects.exists():
                    self.stdout.write('ƒêang x√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi t·∫°o d·ªØ li·ªáu m·∫´u...')
                    Transaction.objects.all().delete()
                    self.stdout.write(self.style.SUCCESS('ƒê√£ x√≥a d·ªØ li·ªáu c≈©'))
                self.tao_du_lieu_mau()
                return
            else:
                raise CommandError(f'Kh√¥ng t√¨m th·∫•y file: {file_path}')
        
        # N·∫øu c√≥ file th·∫≠t v√† c√≥ d·ªØ li·ªáu c≈©, x√≥a d·ªØ li·ªáu c≈©
        if Transaction.objects.exists():
            self.stdout.write('Ph√°t hi·ªán file d·ªØ li·ªáu th·∫≠t. ƒêang x√≥a d·ªØ li·ªáu m·∫´u c≈©...')
            Transaction.objects.all().delete()
            self.stdout.write(self.style.SUCCESS('ƒê√£ x√≥a d·ªØ li·ªáu c≈©, s·∫µn s√†ng import d·ªØ li·ªáu th·∫≠t'))
        
        # X√≥a d·ªØ li·ªáu c≈© n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if options['clear']:
            self.stdout.write('ƒêang x√≥a d·ªØ li·ªáu c≈© theo y√™u c·∫ßu...')
            Transaction.objects.all().delete()
            self.stdout.write(self.style.SUCCESS('ƒê√£ x√≥a d·ªØ li·ªáu c≈©'))

        try:
            # Kh·ªüi t·∫°o b·ªô x·ª≠ l√Ω d·ªØ li·ªáu
            bo_xu_ly = BoXuLyDuLieu()
            
            # ƒê·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu
            self.stdout.write('ƒêang ƒë·ªçc file Excel...')
            df_goc = bo_xu_ly.doc_file_excel(file_path)
            
            self.stdout.write('ƒêang chu·∫©n h√≥a d·ªØ li·ªáu...')
            df_chuan_hoa = bo_xu_ly.chuan_hoa_ten_cot(df_goc)
            df_sach = bo_xu_ly.lam_sach_du_lieu(df_chuan_hoa)
            
            # Import v√†o database
            self.stdout.write('ƒêang import v√†o c∆° s·ªü d·ªØ li·ªáu...')
            so_luong_import = self.import_vao_database(df_sach)
            
            # T·∫°o t√≥m t·∫Øt
            tom_tat = bo_xu_ly.tao_tom_tat_du_lieu(df_sach)
            self.hien_thi_tom_tat(tom_tat, so_luong_import)
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ HO√ÄN TH√ÄNH! ƒê√£ import {so_luong_import} giao d·ªãch')
            )
            
        except Exception as e:
            raise CommandError(f'L·ªói khi import d·ªØ li·ªáu: {str(e)}')

    def import_vao_database(self, df):
        """
        Import DataFrame v√†o c∆° s·ªü d·ªØ li·ªáu
        """
        so_luong_import = 0
        so_luong_loi = 0
        
        for index, row in df.iterrows():
            try:
                # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu
                giao_dich_data = self.chuyen_doi_du_lieu_row(row)
                
                # T·∫°o ho·∫∑c c·∫≠p nh·∫≠t giao d·ªãch
                giao_dich, created = Transaction.objects.get_or_create(
                    ma_giao_dich=giao_dich_data['ma_giao_dich'],
                    defaults=giao_dich_data
                )
                
                if created:
                    so_luong_import += 1
                    if so_luong_import % 100 == 0:
                        self.stdout.write(f'ƒê√£ import {so_luong_import} giao d·ªãch...')
                        
            except Exception as e:
                so_luong_loi += 1
                if so_luong_loi <= 5:  # Ch·ªâ hi·ªÉn th·ªã 5 l·ªói ƒë·∫ßu ti√™n
                    self.stdout.write(
                        self.style.WARNING(f'L·ªói t·∫°i d√≤ng {index + 1}: {str(e)}')
                    )
        
        if so_luong_loi > 0:
            self.stdout.write(
                self.style.WARNING(f'C√≥ {so_luong_loi} d√≤ng b·ªã l·ªói kh√¥ng th·ªÉ import')
            )
        
        return so_luong_import

    def chuyen_doi_du_lieu_row(self, row):
        """
        Chuy·ªÉn ƒë·ªïi m·ªôt d√≤ng d·ªØ li·ªáu th√†nh format ph√π h·ª£p v·ªõi model
        """
        return {
            'ma_giao_dich': str(row.get('ma_giao_dich', f'GD_{random.randint(100000, 999999)}')),
            'id_nguoi_gui': str(row.get('id_nguoi_gui', f'USER_{random.randint(1000, 9999)}')),
            'id_nguoi_nhan': str(row.get('id_nguoi_nhan', f'USER_{random.randint(1000, 9999)}')),
            'so_tien': float(row.get('so_tien', 0)),
            'so_du_tai_khoan': float(row.get('so_du_tai_khoan', 0)),
            'ngay_gio_giao_dich': pd.to_datetime(row.get('ngay_gio_giao_dich')),
            'loai_giao_dich': str(row.get('loai_giao_dich', 'KHAC')),
            'trang_thai_giao_dich': str(row.get('trang_thai_giao_dich', 'HOAN_THANH')),
            'noi_dung_giao_dich': str(row.get('noi_dung_giao_dich', 'Kh√¥ng c√≥ m√¥ t·∫£')),
            'co_gian_lan': bool(row.get('co_gian_lan', False))
        }

    def tao_du_lieu_mau(self):
        """
        T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªÉ test
        """
        from datetime import datetime, timedelta
        import random
        
        self.stdout.write('ƒêang t·∫°o d·ªØ li·ªáu m·∫´u...')
        
        # Danh s√°ch c√°c lo·∫°i giao d·ªãch
        cac_loai_giao_dich = ['CHUYEN_KHOAN', 'THANH_TOAN', 'RUT_TIEN', 'GUI_TIEN', 'MUA_SAM']
        cac_trang_thai = ['HOAN_THANH', 'CHO_XU_LY', 'THAT_BAI']
        cac_noi_dung = [
            'Chuy·ªÉn ti·ªÅn cho b·∫°n', 'Thanh to√°n h√≥a ƒë∆°n', 'Mua s·∫Øm online',
            'N·∫°p ti·ªÅn ƒëi·ªán tho·∫°i', 'Thanh to√°n d·ªãch v·ª•', 'Chuy·ªÉn ti·ªÅn gia ƒë√¨nh',
            'Mua th·ª±c ph·∫©m', 'Thanh to√°n ti·ªÅn ƒëi·ªán', 'ƒê√≥ng h·ªçc ph√≠'
        ]
        
        # T·∫°o 1000 giao d·ªãch m·∫´u
        so_luong_tao = 0
        
        for i in range(1000):
            try:
                # T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n
                ngay_giao_dich = datetime.now() - timedelta(days=random.randint(1, 365))
                so_tien = random.uniform(10000, 5000000)  # 10k - 5M VND
                
                giao_dich = Transaction.objects.create(
                    ma_giao_dich=f'GD_{i+1:06d}',
                    id_nguoi_gui=f'USER_{random.randint(1001, 1050)}',  # 50 ng∆∞·ªùi d√πng
                    id_nguoi_nhan=f'USER_{random.randint(1001, 1050)}',
                    so_tien=so_tien,
                    so_du_tai_khoan=random.uniform(100000, 10000000),
                    ngay_gio_giao_dich=ngay_giao_dich,
                    loai_giao_dich=random.choice(cac_loai_giao_dich),
                    trang_thai_giao_dich=random.choice(cac_trang_thai),
                    noi_dung_giao_dich=random.choice(cac_noi_dung),
                    co_gian_lan=random.random() < 0.05  # 5% giao d·ªãch gian l·∫≠n
                )
                
                so_luong_tao += 1
                
                if so_luong_tao % 100 == 0:
                    self.stdout.write(f'ƒê√£ t·∫°o {so_luong_tao} giao d·ªãch m·∫´u...')
                    
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f'L·ªói t·∫°o giao d·ªãch {i+1}: {str(e)}')
                )
        
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ ƒê√£ t·∫°o {so_luong_tao} giao d·ªãch m·∫´u')
        )

    def hien_thi_tom_tat(self, tom_tat, so_luong_import):
        """
        Hi·ªÉn th·ªã t√≥m t·∫Øt d·ªØ li·ªáu ƒë√£ import
        """
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('üìä T√ìM T·∫ÆT D·ªÆ LI·ªÜU ƒê√É IMPORT'))
        self.stdout.write('='*50)
        
        self.stdout.write(f'üî¢ T·ªïng s·ªë giao d·ªãch: {tom_tat.get("tong_so_giao_dich", 0):,}')
        self.stdout.write(f'‚úÖ S·ªë giao d·ªãch ƒë√£ import: {so_luong_import:,}')
        
        thong_ke_tien = tom_tat.get('thong_ke_so_tien', {})
        self.stdout.write(f'üí∞ T·ªïng gi√° tr·ªã: {thong_ke_tien.get("tong_cong", 0):,.0f} VND')
        self.stdout.write(f'üìä Gi√° tr·ªã trung b√¨nh: {thong_ke_tien.get("trung_binh", 0):,.0f} VND')
        self.stdout.write(f'üìà Gi√° tr·ªã cao nh·∫•t: {thong_ke_tien.get("gia_tri_lon_nhat", 0):,.0f} VND')
        self.stdout.write(f'üìâ Gi√° tr·ªã th·∫•p nh·∫•t: {thong_ke_tien.get("gia_tri_nho_nhat", 0):,.0f} VND')
        
        thong_ke_gian_lan = tom_tat.get('thong_ke_gian_lan', {})
        self.stdout.write(f'‚ö†Ô∏è  S·ªë giao d·ªãch gian l·∫≠n: {thong_ke_gian_lan.get("tong_so_gian_lan", 0):,}')
        self.stdout.write(f'üìä T·ª∑ l·ªá gian l·∫≠n: {thong_ke_gian_lan.get("ty_le_gian_lan", 0)*100:.2f}%')
        
        khoang_thoi_gian = tom_tat.get('khoang_thoi_gian', {})
        if khoang_thoi_gian.get('bat_dau') and khoang_thoi_gian.get('ket_thuc'):
            self.stdout.write(f'üìÖ Kho·∫£ng th·ªùi gian: {khoang_thoi_gian["bat_dau"]} ƒë·∫øn {khoang_thoi_gian["ket_thuc"]}')
        
        phan_bo_loai = tom_tat.get('phan_bo_loai_giao_dich', {})
        if phan_bo_loai:
            self.stdout.write('\nüìà PH√ÇN B·ªê LO·∫†I GIAO D·ªäCH:')
            for loai, so_luong in phan_bo_loai.items():
                self.stdout.write(f'   ‚Ä¢ {loai}: {so_luong:,} giao d·ªãch')
        
        so_nguoi_dung = tom_tat.get('so_nguoi_dung_duy_nhat', {})
        self.stdout.write(f'\nüë• S·ªë ng∆∞·ªùi g·ª≠i duy nh·∫•t: {so_nguoi_dung.get("nguoi_gui", 0):,}')
        self.stdout.write(f'üë§ S·ªë ng∆∞·ªùi nh·∫≠n duy nh·∫•t: {so_nguoi_dung.get("nguoi_nhan", 0):,}')
        
        self.stdout.write('\n' + '='*50)